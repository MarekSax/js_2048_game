{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = this.#createEmptyState()){\n        this.initialState = initialState;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status === \"playing\") {\n            const newState = this.state.map((row)=>this.#mergeCells(row));\n            this.#handleMove(newState);\n        }\n    }\n    moveRight() {\n        if (this.status === \"playing\") {\n            const newState = this.state.map((row)=>{\n                const reversedRow = row.slice().reverse();\n                const mergedRow = this.#mergeCells(reversedRow);\n                return mergedRow.reverse();\n            });\n            this.#handleMove(newState);\n        }\n    }\n    moveUp() {\n        if (this.status === \"playing\") {\n            const transposedState = this.#transpose(this.state);\n            const newState = transposedState.map((row)=>this.#mergeCells(row));\n            this.#handleMove(this.#transpose(newState));\n        }\n    }\n    moveDown() {\n        if (this.status === \"playing\") {\n            const transposedState = this.#transpose(this.state);\n            const newState = transposedState.map((row)=>{\n                const reversedRow = row.slice().reverse();\n                const mergedRow = this.#mergeCells(reversedRow);\n                return mergedRow.reverse();\n            });\n            this.#handleMove(this.#transpose(newState));\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.#addRandomTile();\n        this.#addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    // Add your own methods here\n    #createEmptyState() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    #getEmptyCells() {\n        const emptyCells = [];\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                if (cell === 0) emptyCells.push({\n                    rowIndex: rowIndex,\n                    cellIndex: cellIndex\n                });\n            });\n        });\n        return emptyCells;\n    }\n    #addRandomTile() {\n        const emptyCells = this.#getEmptyCells();\n        if (emptyCells.length === 0) return;\n        const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const value = Math.random() > 0.1 ? 2 : 4;\n        this.state[randomCell.rowIndex][randomCell.cellIndex] = value;\n    }\n    #mergeCells(row) {\n        const mergedRow = row.filter((cell)=>cell !== 0);\n        const newRow = [];\n        let i = 0;\n        while(i < mergedRow.length)if (mergedRow[i] === mergedRow[i + 1]) {\n            newRow.push(mergedRow[i] * 2);\n            this.score += mergedRow[i] * 2;\n            i += 2;\n        } else {\n            newRow.push(mergedRow[i]);\n            i += 1;\n        }\n        newRow.push(...Array(4 - newRow.length).fill(0));\n        return newRow;\n    }\n    #transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    #willStateChange(newState) {\n        return JSON.stringify(this.state) !== JSON.stringify(newState);\n    }\n    #isWin() {\n        this.status = this.state.some((row)=>row.includes(2048)) ? \"win\" : this.status;\n    }\n    #isLose() {\n        for (const row of this.state){\n            if (row.some((i)=>i === 0)) return false;\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === row[i + 1]) return false;\n            }\n        }\n        for(let c = 0; c < 4; c++){\n            const row = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === row[i + 1]) return false;\n            }\n        }\n        return true;\n    }\n    #handleMove(newState) {\n        if (this.#willStateChange(newState)) {\n            this.state = newState;\n            this.#addRandomTile();\n            this.#isWin();\n            if (this.#isLose()) this.status = \"lose\";\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Uncomment the next lines to use your game instance in the browser\n// [\n//   [2, 0, 2, 2],\n//   [0, 2, 2, 2],\n//   [2, 2, 0, 2],\n//   [2, 2, 2, 0],\n// ]\n// Write your code here\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button\", \".start\");\nfunction $09e991522ca7e64e$var$updateTable() {\n    const gameState = $09e991522ca7e64e$var$game.getState();\n    const table = document.querySelector(\".game-field\");\n    const tbody = table.querySelector(\"tbody\");\n    tbody.innerHTML = \"\";\n    for(let i = 0; i < gameState.length; i++){\n        const row = gameState[i];\n        const tr = document.createElement(\"tr\");\n        tr.className = \"field-row\";\n        for(let j = 0; j < row.length; j++){\n            const cell = row[j];\n            const td = document.createElement(\"td\");\n            td.textContent = cell !== 0 ? cell : \"\";\n            td.className = cell !== 0 ? `field-cell field-cell--${cell}` : \"field-cell\";\n            tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n    }\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    const gameScore = document.querySelector(\".game-score\");\n    gameScore.innerText = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$handleMessages(action, type) {\n    const startMessage = document.querySelector(\".message-start\");\n    const winMessage = document.querySelector(\".message-win\");\n    const loseMessage = document.querySelector(\".message-lose\");\n    if (action === \"hide\") switch(type){\n        case \"start\":\n            startMessage.classList.add(\"hidden\");\n            break;\n        case \"win\":\n            winMessage.classList.add(\"hidden\");\n            break;\n        case \"lose\":\n            loseMessage.classList.add(\"hidden\");\n            break;\n        default:\n            break;\n    }\n    if (action === \"show\") switch(type){\n        case \"start\":\n            startMessage.classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            winMessage.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            loseMessage.classList.remove(\"hidden\");\n            break;\n        default:\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$handleGameStatus() {\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"win\":\n            $09e991522ca7e64e$var$handleMessages(\"show\", \"win\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$handleMessages(\"show\", \"lose\");\n            break;\n        default:\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$updateGame() {\n    $09e991522ca7e64e$var$updateTable();\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$handleGameStatus();\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"idle\":\n            $09e991522ca7e64e$var$game.start();\n            $09e991522ca7e64e$var$updateTable();\n            $09e991522ca7e64e$var$startButton.className = \"button restart\";\n            $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n            $09e991522ca7e64e$var$handleMessages(\"hide\", \"start\");\n            $09e991522ca7e64e$var$updateScore();\n            break;\n        case \"playing\":\n            $09e991522ca7e64e$var$game.restart();\n            $09e991522ca7e64e$var$updateTable();\n            $09e991522ca7e64e$var$startButton.className = \"button start\";\n            $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n            $09e991522ca7e64e$var$handleMessages(\"show\", \"start\");\n            $09e991522ca7e64e$var$updateScore();\n            break;\n        case \"win\":\n            $09e991522ca7e64e$var$game.restart();\n            $09e991522ca7e64e$var$updateTable();\n            $09e991522ca7e64e$var$startButton.className = \"button start\";\n            $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n            $09e991522ca7e64e$var$handleMessages(\"hide\", \"win\");\n            $09e991522ca7e64e$var$handleMessages(\"show\", \"start\");\n            $09e991522ca7e64e$var$updateScore();\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$game.restart();\n            $09e991522ca7e64e$var$updateTable();\n            $09e991522ca7e64e$var$startButton.className = \"button start\";\n            $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n            $09e991522ca7e64e$var$handleMessages(\"hide\", \"lose\");\n            $09e991522ca7e64e$var$handleMessages(\"show\", \"start\");\n            $09e991522ca7e64e$var$updateScore();\n            break;\n        default:\n            break;\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$updateGame();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$updateGame();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$updateGame();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$updateGame();\n            break;\n        default:\n            break;\n    }\n});\n\n\n//# sourceMappingURL=index.e99d90ef.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Uncomment the next lines to use your game instance in the browser\n// [\n//   [2, 0, 2, 2],\n//   [0, 2, 2, 2],\n//   [2, 2, 0, 2],\n//   [2, 2, 2, 0],\n// ]\n\n// Write your code here\n\nconst startButton = document.querySelector('.button', '.start');\n\nfunction updateTable() {\n  const gameState = game.getState();\n  const table = document.querySelector('.game-field');\n  const tbody = table.querySelector('tbody');\n\n  tbody.innerHTML = '';\n\n  for (let i = 0; i < gameState.length; i++) {\n    const row = gameState[i];\n    const tr = document.createElement('tr');\n\n    tr.className = 'field-row';\n\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      const td = document.createElement('td');\n\n      td.textContent = cell !== 0 ? cell : '';\n\n      td.className =\n        cell !== 0 ? `field-cell field-cell--${cell}` : 'field-cell';\n      tr.appendChild(td);\n    }\n    tbody.appendChild(tr);\n  }\n}\n\nfunction updateScore() {\n  const gameScore = document.querySelector('.game-score');\n\n  gameScore.innerText = game.getScore();\n}\n\nfunction handleMessages(action, type) {\n  const startMessage = document.querySelector('.message-start');\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n\n  if (action === 'hide') {\n    switch (type) {\n      case 'start':\n        startMessage.classList.add('hidden');\n        break;\n      case 'win':\n        winMessage.classList.add('hidden');\n        break;\n      case 'lose':\n        loseMessage.classList.add('hidden');\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (action === 'show') {\n    switch (type) {\n      case 'start':\n        startMessage.classList.remove('hidden');\n        break;\n      case 'win':\n        winMessage.classList.remove('hidden');\n        break;\n      case 'lose':\n        loseMessage.classList.remove('hidden');\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nfunction handleGameStatus() {\n  switch (game.getStatus()) {\n    case 'win':\n      handleMessages('show', 'win');\n      break;\n    case 'lose':\n      handleMessages('show', 'lose');\n      break;\n    default:\n      break;\n  }\n}\n\nfunction updateGame() {\n  updateTable();\n  updateScore();\n  handleGameStatus();\n}\n\nstartButton.addEventListener('click', () => {\n  switch (game.getStatus()) {\n    case 'idle':\n      game.start();\n      updateTable();\n      startButton.className = 'button restart';\n      startButton.textContent = 'Restart';\n      handleMessages('hide', 'start');\n      updateScore();\n      break;\n    case 'playing':\n      game.restart();\n      updateTable();\n      startButton.className = 'button start';\n      startButton.textContent = 'Start';\n      handleMessages('show', 'start');\n      updateScore();\n      break;\n    case 'win':\n      game.restart();\n      updateTable();\n      startButton.className = 'button start';\n      startButton.textContent = 'Start';\n      handleMessages('hide', 'win');\n      handleMessages('show', 'start');\n      updateScore();\n      break;\n    case 'lose':\n      game.restart();\n      updateTable();\n      startButton.className = 'button start';\n      startButton.textContent = 'Start';\n      handleMessages('hide', 'lose');\n      handleMessages('show', 'start');\n      updateScore();\n      break;\n    default:\n      break;\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      updateGame();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      updateGame();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      updateGame();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      updateGame();\n      break;\n    default:\n      break;\n  }\n});\n","'use strict';\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = this.#createEmptyState()) {\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const newState = this.state.map((row) => this.#mergeCells(row));\n\n      this.#handleMove(newState);\n    }\n  }\n  moveRight() {\n    if (this.status === 'playing') {\n      const newState = this.state.map((row) => {\n        const reversedRow = row.slice().reverse();\n        const mergedRow = this.#mergeCells(reversedRow);\n\n        return mergedRow.reverse();\n      });\n\n      this.#handleMove(newState);\n    }\n  }\n  moveUp() {\n    if (this.status === 'playing') {\n      const transposedState = this.#transpose(this.state);\n      const newState = transposedState.map((row) => this.#mergeCells(row));\n\n      this.#handleMove(this.#transpose(newState));\n    }\n  }\n  moveDown() {\n    if (this.status === 'playing') {\n      const transposedState = this.#transpose(this.state);\n      const newState = transposedState.map((row) => {\n        const reversedRow = row.slice().reverse();\n        const mergedRow = this.#mergeCells(reversedRow);\n\n        return mergedRow.reverse();\n      });\n\n      this.#handleMove(this.#transpose(newState));\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.#addRandomTile();\n    this.#addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Add your own methods here\n\n  #createEmptyState() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  #getEmptyCells() {\n    const emptyCells = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ rowIndex, cellIndex });\n        }\n      });\n    });\n\n    return emptyCells;\n  }\n\n  #addRandomTile() {\n    const emptyCells = this.#getEmptyCells();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomCell =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const value = Math.random() > 0.1 ? 2 : 4;\n\n    this.state[randomCell.rowIndex][randomCell.cellIndex] = value;\n  }\n\n  #mergeCells(row) {\n    const mergedRow = row.filter((cell) => cell !== 0);\n    const newRow = [];\n    let i = 0;\n\n    while (i < mergedRow.length) {\n      if (mergedRow[i] === mergedRow[i + 1]) {\n        newRow.push(mergedRow[i] * 2);\n        this.score += mergedRow[i] * 2;\n        i += 2;\n      } else {\n        newRow.push(mergedRow[i]);\n        i += 1;\n      }\n    }\n    newRow.push(...Array(4 - newRow.length).fill(0));\n\n    return newRow;\n  }\n\n  #transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  #willStateChange(newState) {\n    return JSON.stringify(this.state) !== JSON.stringify(newState);\n  }\n\n  #isWin() {\n    this.status = this.state.some((row) => row.includes(2048))\n      ? 'win'\n      : this.status;\n  }\n\n  #isLose() {\n    for (const row of this.state) {\n      if (row.some((i) => i === 0)) {\n        return false;\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let c = 0; c < 4; c++) {\n      const row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  #handleMove(newState) {\n    if (this.#willStateChange(newState)) {\n      this.state = newState;\n      this.#addRandomTile();\n      this.#isWin();\n\n      if (this.#isLose()) {\n        this.status = 'lose';\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","createEmptyState","state","map","row","score","status","moveLeft","newState","mergeCells","handleMove","moveRight","reversedRow","slice","reverse","mergedRow","moveUp","transposedState","transpose","moveDown","getScore","getState","getStatus","start","addRandomTile","restart","Array","from","length","fill","getEmptyCells","emptyCells","forEach","rowIndex","cell","cellIndex","push","randomCell","Math","floor","random","filter","newRow","i","matrix","_","colIndex","willStateChange","JSON","stringify","isWin","some","includes","isLose","c","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$updateTable","gameState","tbody","table","innerHTML","tr","createElement","className","j","td","textContent","appendChild","$09e991522ca7e64e$var$updateScore","gameScore","innerText","$09e991522ca7e64e$var$handleMessages","action","type","startMessage","winMessage","loseMessage","classList","add","remove","$09e991522ca7e64e$var$updateGame","$09e991522ca7e64e$var$handleGameStatus","addEventListener","e","key"],"version":3,"file":"index.e99d90ef.js.map"}